/* 

    Insert a client into the clients table
*/
INSERT INTO clients (clientFirstname,clientLastname, clientEmail, clientPassword, clientLevel, comment) VALUES('Tony', 'Stark', 'tony@starkent.com', 'Iam1ronM@n', 1, 'I am the real Ironman');


/*

Modify the Tony Stark record to change the clientLevel to 3

*/

UPDATE clients
SET clientLevel = 3
WHERE clientId = 10


/*

Modify the "GM Hummer" record to read "spacious interior" rather than "small interior" using a single query. 

*/

UPDATE inventory 
SET invDescription = replace(invDescription, 'small', 'spacious')
WHERE invId = 12

/*

Use an inner join to select the invModel field from the inventory table and the classificationName field from the carclassification table for inventory items that belong to the "SUV" category.

*/

SELECT invModel, classificationName
FROM inventory
INNER JOIN carclassification
ON inventory.classificationId = carclassification.classificationId
WHERE classificationName = 'SUV'

/*

Delete the Jeep Wrangler from the database.

*/

DELETE FROM inventory WHERE invId = 1;

/*

Update all records in the Inventory table to add "/phpmotors" to the beginning of the file path in the invImage and invThumbnail columns using a single query. 

*/

UPDATE inventory
SET invImage = CONCAT("/phpmotors", invImage), invThumbnail = CONCAT("/phpmotors", invThumbnail)




using account::Account;
using std::cout;
using std::cin;
using std::endl;

int Account::id_number_global = 0;

Account::Account() : id_number(id_number_global++), name(""), balance(0.0) {}

void Account::setup() {
    cout << "Enter the name: ";
    cin >> name;
    cout << "Enter the balance: ";
    cin >> balance;
}

void Account::display() const {
    cout << "Account ID: " << id_number << "  Name: " << name << "  Balance: $" << balance << endl;
}

void account::Account::deposit(float d)
{
    balance += d;
}

void account::Account::withdraw(float w)
{
    balance -= w;
}

int account::Account::get_id()
{
    return id_number;
}

float account::Account::get_balance()
{
    return balance;
}

// Week4.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <iomanip>
#include <list>
#include <numeric>
#include <algorithm>
#include "Account.h"

using namespace std;
using account::Account;

list<Account>::iterator find(list<Account>& accounts, int id_to_find)
{
    list<Account>::iterator it;
    for (it = accounts.begin(); it != accounts.end(); ++it)
    {
        if (it->get_id() == id_to_find)
            return it;
    }
    return it;
}

list<Account>::iterator prompt_account(list<Account>& accounts)
{
    cout << "Enter the ID of the account to find: ";
    int id;
    cin >> id;
    auto account_it = find(accounts, id);
    if (account_it == accounts.end()) {
        cout << "Account not found." << endl;
    }
    else {
        cout << "Found account: ";
        account_it->display();
    }
    return account_it;
}

int main()
{
    cout << fixed;
    cout << setprecision(2);

    list<Account> accounts;

    int choice = -1;
    double deposit;
    while (choice != 0) {
        cout << "Account Menu:" << endl;
        cout << "0. Quit Program" << endl;
        cout << "1. Display Account Information" << endl;
        cout << "2. Add a deposit to an account" << endl;
        cout << "3. Withdraw from an account" << endl;
        cout << "4. Add new account" << endl;
        cout << "5. Find account by ID" << endl;
        cout << "6. Remove account" << endl;
        cout << "7. Show total balance for all accounts" << endl;
        cout << "8. Add a dividend to all accounts" << endl;

        cout << "Your Choice: ";
        cin >> choice;
        if (choice == 1) {
            for_each(accounts.begin(), accounts.end(),
                [](auto& account) {
                    account.display();
                }
            );
        }
        else if (choice == 2) {
            auto account_it = prompt_account(accounts);
            if (account_it != accounts.end()) {
                cout << "Amount to deposit: ";
                float deposit;
                cin >> deposit;
                account_it->deposit(deposit);
            }
        }
        else if (choice == 3) {
            auto account_it = prompt_account(accounts);
            if (account_it != accounts.end()) {
                cout << "Amount to withdraw: ";
                float withdraw;
                cin >> withdraw;
                account_it->withdraw(withdraw);
            }
        }
        else if (choice == 4) {
            Account account;
            account.setup();
            accounts.push_back(account);
        }
        else if (choice == 5) {
            prompt_account(accounts);
        }
        else if (choice == 6) {
            int id = -1;
            cout << "Enter account ID to remove : ";
            cin >> id;

            auto new_end = remove_if(accounts.begin(), accounts.end(), [id](auto& account) {
                return id == account.get_id();
                });
            accounts.erase(new_end, accounts.end());
        }
        else if (choice == 7) {
            float total = accumulate(accounts.begin(), accounts.end(), 0.0f,
                [](auto accumulator, auto& account) {
                    return accumulator + account.get_balance();
                }
            );
            cout << "Total in all accounts: $" << total << endl;
        }
        else if (choice == 8) {
            int dividend = -1;
            cout << "Enter the dividend as a percentage : ";
            cin >> dividend;
            transform(accounts.begin(), accounts.end(), accounts.begin(),
                [dividend](auto& account) {
                    account.deposit(dividend * 0.01 * account.get_balance());
                    return account;
                }
            );
        }

        cout << endl;
    }
}


#pragma once

#include <string>

namespace account {
    class Account {
    private:
        static int id_number_global;
        int id_number;
        std::string name;
        float balance;
    public:
        Account();
        void setup();
        void display() const;
        void deposit(float);
        void withdraw(float);
        int get_id();
        float get_balance();
    };
}